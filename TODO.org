Lish TODO list							    -*- org -*-

* Before pre-release:
** fix all bugs
** do essential features
** deal with library / utils issue (OR NOT)
* BUGS:
** pipes
*** make sure stuff in piping.lisp closes pipes
*** piping from lisp command to system command
    gets no output, e.g.: grep defun *.lisp | /usr/bin/less
    see (defimplementation background-save-image in slime/swank/sbcl.lisp
*** pipes to lisp commands take too much memory
*** pipes seem to fail when taking a long time and going to a pipe.
    e.g.: find -d ~/ -n foo | less  OR even: | pager
** arg processing related:
*** env builtin fails because of inadequate arg processing
*** kill builtin arg processing
*** strings arg completion fail
*** argument parsing for commands
**** fix edge cases, more testing for posix-to-lisp-args
**** Really need to re-design! See extract commands in "Essential features"
** completion
*** completion should work in pipelines
   when completing in a pipeline, e.g.: cat file | grep 
   It doesn't seem to do anything, is probably trying to complete args
   for the first command, not the last command in the pipeline
*** completion interning of partial symbol, so completing doesn't work right
    fixed with *read-intern*, but that's an even bigger problem.
*** completion (globbing) doesn't work on non-ASCII file names? e.g. résumé
**** need unicode normalizer (see char-util.lisp)
**** WORKAROUND: use C-x 9 to type un-normalized combining version
    e.g. '_ for combining COMBINING_ACUTE_ACCENT
** valence element-type (and encoding) issues with pipes and redirect
*** cat < words - not a binary input stream
*** /bin/cat < words - CR or NL doesn't get mapped right
** when below completion, temporary prompts and messages should go below too
*** for exmaple when M-=, binding-of-key
** newly defined commands don't get recognized in completion?
** tiny-rl display bugs
*** still problems clearing later lines after delete on long lines
*** something else?
** time should work for whole pipelines
   time just times the first command in the pipeline
   e.g. time cat /usr/share/dict/words | snip -a bogus
   doesn't get the time, since it's snipped, and also it doesn't time snip
** some seemingly sbcl specific bug when reading a non existent symbol,
   during load-file, like: no-exist:or-this
   exhibited when loading .lishrc doc command?
** implementation specific bugs
*** ccl
**** under style completion doesn't go back up enough lines
**** lisp symbol completion, probably read-intern related, since it works in repl
** DONE fixed bugs
*** DONE sbcl job control
**** crashy as fuck
*** DONE resume doesn't work
    resume only works when one job, doesn't get jobs spec arguments right
*** DONE argument defaults don't work in lish commands? (see wc)
*** DONE should probabbaly unset $PWD if we're not going to update it
*** DONE completion with absolute path and stuff following, e.g.:
    "/opt/local/share/man/<here> (foo bar)"
*** DONE glob expansion of filenames with quoted spaces?
*** DONE cd to dir with spaces?
*** DONE lisp expressions after the first don't get evaluated?
*** DONE fix arg-option
**** fix help
**** arg completion
*** DONE completion in the middle of something??
**** first word when args are after
*** DONE aliases get double expanded, e.g. filenames with "[]" in it
    test: touch "[]" ; ll * -> "Invalid empty character class"
*** DONE fix find -d ~/ -n foo
**** DONE Prints all files, should only print matching foo,
     but find --dir ~/ --name foo, works.
**** DONE Gets a permission error, then fails to report it:
     "There is no slot named SB-KERNEL:FORMAT-CONTROL in #<SB-KERNEL::CONDITION-CLASSOID OPSYS:POSIX-ERROR>"
**** DONE ?Seems to fail when taking a long time and going to a pipe.
     e.g.: find -d ~/ -n foo | less  OR even: | pager
*** DONE completion bug? FIXED IN ../complete.lisp
    ▶ m /etc/ini<TAB>
    -> gives
    ▶ m /etc/initramfs-tools
    but shoud give:
    ▶ m /etc/init
    because:
    init  init.d  initramfs-tools
** HOLD don't bother
*** < or > in first word?
    This doesn't fail, but do nothing useful.
    Specificly "> file" doesn't zero out or create an empty file.
* Essential festures
** Command & argument redesign
   see posix-args.lisp
*** EXTRACT COMMANDS!!
    I know it seems crazy, but, I want to separate commands from lish,
    so that other things can use commands, command argument completion,
    etc. Should work for things bound to keys (keymaps) in apps, as well
    as commmand line things, as well as imbedded app commands (like the
    extended commands in pager), neox (of course), etc.
    Think of other examples, like commands with sub comands, like macports
    port, crap like dscl, openssl, old style ftp, etc.
    Command sub-commands should somehow integrate seemlessly.
    The shell specific things like posix-to-lisp args can stay in lish,
    and other things specific to shell syntax.
*** Better argument specification
**** operators and grouping in argument lists: :or :opt :and :repeat :case
**** something like docargs
*** argument parser!
**** Argument specification should be able to be a full blown grammar
     down to the character level, but making it easy for normal posix style
     arguments. Hopefully not too much different than the current style.
** test portability
*** windows native
*** implementations
**** ccl
**** abcl
**** clisp
**** cmu
**** lispworks
*** linux
*** cygwin
*** BSD
* Important features
** add argument specs for external programs
*** defexternal?
*** scrape --help output or man pages?
** objects (return values) as pipeline data
   see doing
** add more features to globbing (all the ignored arguments of glob)
*** brace expansion: {foo,bar}
*** recursive globbing: **
    but please let's not do too much crazy globbing, like zsh
    let's just make find-file good with symbolic query syntax
** process substitution <(foo) >(foo)
** add shell errors and restarts
*** appropriate errors should be continuable, restartable
*** all errors should be with shell-error or something
** multiple line command lines, e.g. lines with newlines in them,
   unfinished exprs, etc
   mostly in rl
   rl enter command shouldn't exit
** refine the mechanism for loading/finding commands
*** resolve autoload vs. asdf ldir, vs PATH etc
*** and completion thereof
* Non-essential features
** port to windows
** syntax colorization
** consider adding default --help (and maybe --version) args?
** suggestions from history?
** be able to call lish functions from not in the shell, ! etc
** shell specific key actions, e.g.
*** M-. cycle through pasting the last word of previous commands
*** figure out proper key to put SHELL-EXPAND-LINE on, it's on ^V now.
** smarter completion, specifically:
*** completion should use proper completion for command line argument types
    need to implement posix arg list to shell arg list parsing
    posix-to-shell-args
*** just basically do the ‘right thing’ in any circumstance!!!
    completion should know what you can type in any circumstance and
    provide help.
*** other completion types
**** #\character_name completion
*** try git completion for example (compare to zsh)
*** consider whole path expansion, eg.: /u/l/b -> /usr/local/bin
**** also /u/s/b -> /usr/sX/b  (cursor is placed at X)
** prettier completion
*** cycle through options by repeating tab
*** colorized: filenames, etc
** completion of remote filenames? ssh scp sftp etc?
*** bash or zsh
**** greps 'Host' from ~/.ssh/config
**** greps /etc/ssh/ssh_config ??
**** greps ~/.ssh/known_hosts (but it's hashed on ubuntu)
*** sshfs
*** cl-fuse
*** cl-fuse-meta-fs
*** fuse http://fuse.sourceforge.net/ [[http://fuse.sourceforge.net/helloworld.html][helloworld.c]]
** more built-in commands (bash-like):
*** "command" command?
*** finish bind
*** ulimit
*** umask
*** wait
* DONE completed features
** DONE give in and handle ENVVAR=value command -OR- make env builtin work
** DONE argument name can be either string or symbol
** DONE replace under the prompt style, instead of scrolling style
** DONE redirections: < > <<
** DONE job control
*** at least handle ^Z of subprocess!
*** code after fork
**** must be able to run code (reset job signals) after fork
**** -OR-
**** make a spawn/fork/pipe in C which handles job signals
*** make a small test to see which implementations support code after fork
*** background jobs: & fg bg jobs %n ^Z SIGTSTP etc
*** jobs command
** DONE chains: || &&
** DONE expand shell line (like bash)
** DONE figure out a syntax for multiple commands on a line (like posix ;)
*** patially done with: ^^ && ||
* COMMENT org
#+SEQ_TODO: TODO DONE
#+SEQ_TODO: LATER NO HOLD
* COMMENT MeTaDaTa
creation date: [2014-12-01 Mon 00:20:33]
creator: "Nibby Nebbulous" <nibbula@gmail.com>
tags: lish lisp shell todo bugs
