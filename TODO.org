Lish TODO list							     -*- org -*-

* Before pre-release:
** fix all bugs
** do essential features
** deal with library / utils issue
* BUGS:
** fix find -d ~/ -n foo
   Be more explicit when stating bugs!!
   What is wrong?
   But it seems to fail when taking a long time and going to a pipe.
   e.g.:    find -d ~/ -n foo | less  OR even: | pager
** piping from lisp command to system command
   gets no output, e.g.: grep defun *.lisp | /usr/bin/less
** completion interning of partial symbol, so completing doesn't work right
** resume doesn't work
   resume only works when one job, doesn't get jobs spec arguments right
** completion (globbing) doesn't work on non-ASCII file names? e.g. résumé
*** need unicode normalizer (see char-util.lisp)
** parsing < in first word?
** argument defaults don't work in lish commands? (see wc)
** newly defined commands don't get recognized in completion
** tiny-rl display bugs
** argument parsing for commands
*** fix edge cases, more testing for posix-to-lisp-args
** time should work for whole pipelines
   time just times the first command in the pipeline
   e.g. time cat /usr/share/dict/words | snip -a bogus
   doesn't get the time, since it's snipped, and also it doesn't time snip
** completion should work in pipelines
   when completing in a pipeline, e.g.: cat file | grep 
   It doesn't seem to do anything, is probably trying to complete args
   for the first command, not the last command in the pipeline
** some seemingly sbcl specific bug when reading a non existent symbol,
   during load-file, like: no-exist:or-this
   exhibited when loading .lishrc doc command?
** DONE fixed bugs
*** DONE completion with absolute path and stuff following, e.g.:
    "/opt/local/share/man/<here> (foo bar)"
*** DONE glob expansion of filenames with quoted spaces?
*** DONE cd to dir with spaces?
*** DONE lisp expressions after the first don't get evaluated?
*** DONE fix arg-option
**** fix help
**** arg completion
* Essential festures
** EXTRACT COMMANDS!!
   I know it seems crazy, but, I want to separate commands from lish,
   so that other things can use commands, command argument completion,
   etc. Should work for things bound to keys (keymaps) in apps, as well
   as commmand line things, as well as imbedded app commands (like the
   extended commands in pager), neox (of course), etc.
   Think of other examples, like commands with sub comands, like macports
   port, crap like dscl, openssl, old style ftp, etc.
   Command sub-commands should somehow integrate seemlessly.
   The shell specific things like posix-to-lisp args can stay in lish,
   and other things specific to shell syntax.
** redirections: < > << <()
** give in and handle ENVVAR=value command -OR- make env builtin work
** at least handle ^Z of subprocess!
*** code after fork
**** must be able to run code (reset job signals) after fork
**** -OR-
**** make a spawn/fork/pipe in C which handles job signals
*** make a small test to see which implementations support code after fork
** process stuff:
   see (defimplementation background-save-image in slime/swank/sbcl.lisp
*** chains: || &&
*** background jobs: & fg bg jobs %n ^Z SIGTSTP etc
*** jobs command
** test portability
*** implementations
**** clisp, cmu, lispworks, abcl?
*** linux
*** cygwin?
* Important features
** add argument specs for external programs
*** defexternal?
*** scrape --help output or man pages?
** objects (return values) as pipeline data
   - Perhaps generic streams which could be object streams or character
     streams. But how to determine which one?
   - Perhaps the stream is multiple/paralell? aka there is always an object
     stream, since there are always return values, AND there is a possible
     output stream which . . .
   - Functions that take sequences or streams can marked with a special × mark
     to indicate which argument the pipeline is input to.
*** How About: implicit *shell-output* and *shell-input*
    that can be an sequence or and object-stream???
    Functions and commands can choose what they want to do:
    objects, text i/o, or both.
*** have shell-eval return a value: for external commands return the
    old shell exit status (from wait), otherwise the command function
    return value, or lisp return value
** figure out a syntax for multiple commands on a line (like posix ;)
** process substitution <(foo) >(foo)
** add more features to globbing (all the ignored arguments of glob)
*** brace expansion: {foo,bar}
*** recursive globbing: **
    but please let's not do too much crazy globbing, like zsh
    let's just make find-file good with symbolic query syntax
** add shell errors and restarts
*** appropriate errors should be continuable, restartable
*** all errors should be with shell-error or something
* Non-essential features
** port to windows
** syntax colorization
** suggestions from history?
** be able to call lish functions from not in the shell, ! etc
** shell specific key actions, e.g.
*** M-. cycle through pasting the last word of previous commands
*** M-o expand shell line (like bash)
** smarter completion, specifically:
*** completion should use proper completion for command line argument types
    need to implement posix arg list to shell arg list parsing
    posix-to-shell-args
*** just basically do the ‘right thing’ in any circumstance!!!
    completion should know what you can type in any circumstance and
    provide help.
*** other completion types
**** #\character_name completion
*** try git completion for example (compare to zsh)
*** consider whole path expansion, eg.: /u/l/b -> /usr/local/bin
**** also /u/s/b -> /usr/sX/b  (cursor is placed at X)
** prettier completion
*** replace under the prompt style, instead of scrolling style
*** cycle through options by repeating tab
*** colorized: filenames, etc
** completion of remote filenames? ssh scp sftp etc?
*** bash or zsh
**** greps 'Host' from ~/.ssh/config
**** greps /etc/ssh/ssh_config ??
**** greps ~/.ssh/known_hosts (but it's hashed on ubuntu)
*** sshfs
*** cl-fuse
*** cl-fuse-meta-fs
*** fuse http://fuse.sourceforge.net/ [[http://fuse.sourceforge.net/helloworld.html][helloworld.c]]
** more built-in commands (bash-like):
*** "command" command?
*** finish bind
*** ulimit
*** umask
*** wait
* org
#+SEQ_TODO: TODO DONE
#+SEQ_TODO: LATER NO
* COMMENT MeTaDaTa
creation date: [2014-12-01 Mon 00:20:33]
creator: "Nibby Nebbulous" <nibbula@gmail.com>
tags: lish lisp shell todo bugs
